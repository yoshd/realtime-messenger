// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: realtime_messenger.proto
#ifndef GRPC_realtime_5fmessenger_2eproto__INCLUDED
#define GRPC_realtime_5fmessenger_2eproto__INCLUDED

#include "realtime_messenger.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace rmsg {

class RealtimeMessenger final {
 public:
  static constexpr char const* service_full_name() {
    return "rmsg.RealtimeMessenger";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Login
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::rmsg::LoginReq& request, ::rmsg::LoginRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::LoginRes>> AsyncLogin(::grpc::ClientContext* context, const ::rmsg::LoginReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::LoginRes>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::LoginRes>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::rmsg::LoginReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::LoginRes>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    // Logout
    virtual ::grpc::Status Logout(::grpc::ClientContext* context, const ::rmsg::LogoutReq& request, ::rmsg::LogoutRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::LogoutRes>> AsyncLogout(::grpc::ClientContext* context, const ::rmsg::LogoutReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::LogoutRes>>(AsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::LogoutRes>> PrepareAsyncLogout(::grpc::ClientContext* context, const ::rmsg::LogoutReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::LogoutRes>>(PrepareAsyncLogoutRaw(context, request, cq));
    }
    // CreateRoom
    virtual ::grpc::Status CreateRoom(::grpc::ClientContext* context, const ::rmsg::CreateRoomReq& request, ::rmsg::CreateRoomRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::CreateRoomRes>> AsyncCreateRoom(::grpc::ClientContext* context, const ::rmsg::CreateRoomReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::CreateRoomRes>>(AsyncCreateRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::CreateRoomRes>> PrepareAsyncCreateRoom(::grpc::ClientContext* context, const ::rmsg::CreateRoomReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::CreateRoomRes>>(PrepareAsyncCreateRoomRaw(context, request, cq));
    }
    // JoinRoom
    virtual ::grpc::Status JoinRoom(::grpc::ClientContext* context, const ::rmsg::JoinRoomReq& request, ::rmsg::JoinRoomRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::JoinRoomRes>> AsyncJoinRoom(::grpc::ClientContext* context, const ::rmsg::JoinRoomReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::JoinRoomRes>>(AsyncJoinRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::JoinRoomRes>> PrepareAsyncJoinRoom(::grpc::ClientContext* context, const ::rmsg::JoinRoomReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::JoinRoomRes>>(PrepareAsyncJoinRoomRaw(context, request, cq));
    }
    // LeaveRoom
    virtual ::grpc::Status LeaveRoom(::grpc::ClientContext* context, const ::rmsg::LeaveRoomReq& request, ::rmsg::LeaveRoomRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::LeaveRoomRes>> AsyncLeaveRoom(::grpc::ClientContext* context, const ::rmsg::LeaveRoomReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::LeaveRoomRes>>(AsyncLeaveRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::LeaveRoomRes>> PrepareAsyncLeaveRoom(::grpc::ClientContext* context, const ::rmsg::LeaveRoomReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::LeaveRoomRes>>(PrepareAsyncLeaveRoomRaw(context, request, cq));
    }
    // StartMessageStream
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::rmsg::Message, ::rmsg::Message>> StartMessageStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::rmsg::Message, ::rmsg::Message>>(StartMessageStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rmsg::Message, ::rmsg::Message>> AsyncStartMessageStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rmsg::Message, ::rmsg::Message>>(AsyncStartMessageStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rmsg::Message, ::rmsg::Message>> PrepareAsyncStartMessageStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rmsg::Message, ::rmsg::Message>>(PrepareAsyncStartMessageStreamRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Login
      virtual void Login(::grpc::ClientContext* context, const ::rmsg::LoginReq* request, ::rmsg::LoginRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rmsg::LoginRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::rmsg::LoginReq* request, ::rmsg::LoginRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rmsg::LoginRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Logout
      virtual void Logout(::grpc::ClientContext* context, const ::rmsg::LogoutReq* request, ::rmsg::LogoutRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rmsg::LogoutRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Logout(::grpc::ClientContext* context, const ::rmsg::LogoutReq* request, ::rmsg::LogoutRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rmsg::LogoutRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CreateRoom
      virtual void CreateRoom(::grpc::ClientContext* context, const ::rmsg::CreateRoomReq* request, ::rmsg::CreateRoomRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateRoom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rmsg::CreateRoomRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateRoom(::grpc::ClientContext* context, const ::rmsg::CreateRoomReq* request, ::rmsg::CreateRoomRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateRoom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rmsg::CreateRoomRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // JoinRoom
      virtual void JoinRoom(::grpc::ClientContext* context, const ::rmsg::JoinRoomReq* request, ::rmsg::JoinRoomRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void JoinRoom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rmsg::JoinRoomRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void JoinRoom(::grpc::ClientContext* context, const ::rmsg::JoinRoomReq* request, ::rmsg::JoinRoomRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void JoinRoom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rmsg::JoinRoomRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // LeaveRoom
      virtual void LeaveRoom(::grpc::ClientContext* context, const ::rmsg::LeaveRoomReq* request, ::rmsg::LeaveRoomRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LeaveRoom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rmsg::LeaveRoomRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LeaveRoom(::grpc::ClientContext* context, const ::rmsg::LeaveRoomReq* request, ::rmsg::LeaveRoomRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void LeaveRoom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rmsg::LeaveRoomRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // StartMessageStream
      virtual void StartMessageStream(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::rmsg::Message,::rmsg::Message>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::LoginRes>* AsyncLoginRaw(::grpc::ClientContext* context, const ::rmsg::LoginReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::LoginRes>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::rmsg::LoginReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::LogoutRes>* AsyncLogoutRaw(::grpc::ClientContext* context, const ::rmsg::LogoutReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::LogoutRes>* PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::rmsg::LogoutReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::CreateRoomRes>* AsyncCreateRoomRaw(::grpc::ClientContext* context, const ::rmsg::CreateRoomReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::CreateRoomRes>* PrepareAsyncCreateRoomRaw(::grpc::ClientContext* context, const ::rmsg::CreateRoomReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::JoinRoomRes>* AsyncJoinRoomRaw(::grpc::ClientContext* context, const ::rmsg::JoinRoomReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::JoinRoomRes>* PrepareAsyncJoinRoomRaw(::grpc::ClientContext* context, const ::rmsg::JoinRoomReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::LeaveRoomRes>* AsyncLeaveRoomRaw(::grpc::ClientContext* context, const ::rmsg::LeaveRoomReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rmsg::LeaveRoomRes>* PrepareAsyncLeaveRoomRaw(::grpc::ClientContext* context, const ::rmsg::LeaveRoomReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::rmsg::Message, ::rmsg::Message>* StartMessageStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::rmsg::Message, ::rmsg::Message>* AsyncStartMessageStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::rmsg::Message, ::rmsg::Message>* PrepareAsyncStartMessageStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Login(::grpc::ClientContext* context, const ::rmsg::LoginReq& request, ::rmsg::LoginRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rmsg::LoginRes>> AsyncLogin(::grpc::ClientContext* context, const ::rmsg::LoginReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rmsg::LoginRes>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rmsg::LoginRes>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::rmsg::LoginReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rmsg::LoginRes>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status Logout(::grpc::ClientContext* context, const ::rmsg::LogoutReq& request, ::rmsg::LogoutRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rmsg::LogoutRes>> AsyncLogout(::grpc::ClientContext* context, const ::rmsg::LogoutReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rmsg::LogoutRes>>(AsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rmsg::LogoutRes>> PrepareAsyncLogout(::grpc::ClientContext* context, const ::rmsg::LogoutReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rmsg::LogoutRes>>(PrepareAsyncLogoutRaw(context, request, cq));
    }
    ::grpc::Status CreateRoom(::grpc::ClientContext* context, const ::rmsg::CreateRoomReq& request, ::rmsg::CreateRoomRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rmsg::CreateRoomRes>> AsyncCreateRoom(::grpc::ClientContext* context, const ::rmsg::CreateRoomReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rmsg::CreateRoomRes>>(AsyncCreateRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rmsg::CreateRoomRes>> PrepareAsyncCreateRoom(::grpc::ClientContext* context, const ::rmsg::CreateRoomReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rmsg::CreateRoomRes>>(PrepareAsyncCreateRoomRaw(context, request, cq));
    }
    ::grpc::Status JoinRoom(::grpc::ClientContext* context, const ::rmsg::JoinRoomReq& request, ::rmsg::JoinRoomRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rmsg::JoinRoomRes>> AsyncJoinRoom(::grpc::ClientContext* context, const ::rmsg::JoinRoomReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rmsg::JoinRoomRes>>(AsyncJoinRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rmsg::JoinRoomRes>> PrepareAsyncJoinRoom(::grpc::ClientContext* context, const ::rmsg::JoinRoomReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rmsg::JoinRoomRes>>(PrepareAsyncJoinRoomRaw(context, request, cq));
    }
    ::grpc::Status LeaveRoom(::grpc::ClientContext* context, const ::rmsg::LeaveRoomReq& request, ::rmsg::LeaveRoomRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rmsg::LeaveRoomRes>> AsyncLeaveRoom(::grpc::ClientContext* context, const ::rmsg::LeaveRoomReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rmsg::LeaveRoomRes>>(AsyncLeaveRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rmsg::LeaveRoomRes>> PrepareAsyncLeaveRoom(::grpc::ClientContext* context, const ::rmsg::LeaveRoomReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rmsg::LeaveRoomRes>>(PrepareAsyncLeaveRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::rmsg::Message, ::rmsg::Message>> StartMessageStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::rmsg::Message, ::rmsg::Message>>(StartMessageStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::rmsg::Message, ::rmsg::Message>> AsyncStartMessageStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::rmsg::Message, ::rmsg::Message>>(AsyncStartMessageStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::rmsg::Message, ::rmsg::Message>> PrepareAsyncStartMessageStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::rmsg::Message, ::rmsg::Message>>(PrepareAsyncStartMessageStreamRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Login(::grpc::ClientContext* context, const ::rmsg::LoginReq* request, ::rmsg::LoginRes* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rmsg::LoginRes* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::rmsg::LoginReq* request, ::rmsg::LoginRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rmsg::LoginRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Logout(::grpc::ClientContext* context, const ::rmsg::LogoutReq* request, ::rmsg::LogoutRes* response, std::function<void(::grpc::Status)>) override;
      void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rmsg::LogoutRes* response, std::function<void(::grpc::Status)>) override;
      void Logout(::grpc::ClientContext* context, const ::rmsg::LogoutReq* request, ::rmsg::LogoutRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rmsg::LogoutRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateRoom(::grpc::ClientContext* context, const ::rmsg::CreateRoomReq* request, ::rmsg::CreateRoomRes* response, std::function<void(::grpc::Status)>) override;
      void CreateRoom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rmsg::CreateRoomRes* response, std::function<void(::grpc::Status)>) override;
      void CreateRoom(::grpc::ClientContext* context, const ::rmsg::CreateRoomReq* request, ::rmsg::CreateRoomRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateRoom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rmsg::CreateRoomRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void JoinRoom(::grpc::ClientContext* context, const ::rmsg::JoinRoomReq* request, ::rmsg::JoinRoomRes* response, std::function<void(::grpc::Status)>) override;
      void JoinRoom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rmsg::JoinRoomRes* response, std::function<void(::grpc::Status)>) override;
      void JoinRoom(::grpc::ClientContext* context, const ::rmsg::JoinRoomReq* request, ::rmsg::JoinRoomRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void JoinRoom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rmsg::JoinRoomRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void LeaveRoom(::grpc::ClientContext* context, const ::rmsg::LeaveRoomReq* request, ::rmsg::LeaveRoomRes* response, std::function<void(::grpc::Status)>) override;
      void LeaveRoom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rmsg::LeaveRoomRes* response, std::function<void(::grpc::Status)>) override;
      void LeaveRoom(::grpc::ClientContext* context, const ::rmsg::LeaveRoomReq* request, ::rmsg::LeaveRoomRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void LeaveRoom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rmsg::LeaveRoomRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void StartMessageStream(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::rmsg::Message,::rmsg::Message>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::rmsg::LoginRes>* AsyncLoginRaw(::grpc::ClientContext* context, const ::rmsg::LoginReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rmsg::LoginRes>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::rmsg::LoginReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rmsg::LogoutRes>* AsyncLogoutRaw(::grpc::ClientContext* context, const ::rmsg::LogoutReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rmsg::LogoutRes>* PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::rmsg::LogoutReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rmsg::CreateRoomRes>* AsyncCreateRoomRaw(::grpc::ClientContext* context, const ::rmsg::CreateRoomReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rmsg::CreateRoomRes>* PrepareAsyncCreateRoomRaw(::grpc::ClientContext* context, const ::rmsg::CreateRoomReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rmsg::JoinRoomRes>* AsyncJoinRoomRaw(::grpc::ClientContext* context, const ::rmsg::JoinRoomReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rmsg::JoinRoomRes>* PrepareAsyncJoinRoomRaw(::grpc::ClientContext* context, const ::rmsg::JoinRoomReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rmsg::LeaveRoomRes>* AsyncLeaveRoomRaw(::grpc::ClientContext* context, const ::rmsg::LeaveRoomReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rmsg::LeaveRoomRes>* PrepareAsyncLeaveRoomRaw(::grpc::ClientContext* context, const ::rmsg::LeaveRoomReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::rmsg::Message, ::rmsg::Message>* StartMessageStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::rmsg::Message, ::rmsg::Message>* AsyncStartMessageStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::rmsg::Message, ::rmsg::Message>* PrepareAsyncStartMessageStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_Logout_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateRoom_;
    const ::grpc::internal::RpcMethod rpcmethod_JoinRoom_;
    const ::grpc::internal::RpcMethod rpcmethod_LeaveRoom_;
    const ::grpc::internal::RpcMethod rpcmethod_StartMessageStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Login
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::rmsg::LoginReq* request, ::rmsg::LoginRes* response);
    // Logout
    virtual ::grpc::Status Logout(::grpc::ServerContext* context, const ::rmsg::LogoutReq* request, ::rmsg::LogoutRes* response);
    // CreateRoom
    virtual ::grpc::Status CreateRoom(::grpc::ServerContext* context, const ::rmsg::CreateRoomReq* request, ::rmsg::CreateRoomRes* response);
    // JoinRoom
    virtual ::grpc::Status JoinRoom(::grpc::ServerContext* context, const ::rmsg::JoinRoomReq* request, ::rmsg::JoinRoomRes* response);
    // LeaveRoom
    virtual ::grpc::Status LeaveRoom(::grpc::ServerContext* context, const ::rmsg::LeaveRoomReq* request, ::rmsg::LeaveRoomRes* response);
    // StartMessageStream
    virtual ::grpc::Status StartMessageStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rmsg::Message, ::rmsg::Message>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::rmsg::LoginReq* request, ::rmsg::LoginRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::rmsg::LoginReq* request, ::grpc::ServerAsyncResponseWriter< ::rmsg::LoginRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Logout() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* context, const ::rmsg::LogoutReq* request, ::rmsg::LogoutRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogout(::grpc::ServerContext* context, ::rmsg::LogoutReq* request, ::grpc::ServerAsyncResponseWriter< ::rmsg::LogoutRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateRoom() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoom(::grpc::ServerContext* context, const ::rmsg::CreateRoomReq* request, ::rmsg::CreateRoomRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRoom(::grpc::ServerContext* context, ::rmsg::CreateRoomReq* request, ::grpc::ServerAsyncResponseWriter< ::rmsg::CreateRoomRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_JoinRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_JoinRoom() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_JoinRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinRoom(::grpc::ServerContext* context, const ::rmsg::JoinRoomReq* request, ::rmsg::JoinRoomRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoinRoom(::grpc::ServerContext* context, ::rmsg::JoinRoomReq* request, ::grpc::ServerAsyncResponseWriter< ::rmsg::JoinRoomRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LeaveRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_LeaveRoom() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_LeaveRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveRoom(::grpc::ServerContext* context, const ::rmsg::LeaveRoomReq* request, ::rmsg::LeaveRoomRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeaveRoom(::grpc::ServerContext* context, ::rmsg::LeaveRoomReq* request, ::grpc::ServerAsyncResponseWriter< ::rmsg::LeaveRoomRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartMessageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StartMessageStream() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_StartMessageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartMessageStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rmsg::Message, ::rmsg::Message>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartMessageStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::rmsg::Message, ::rmsg::Message>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(5, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Login<WithAsyncMethod_Logout<WithAsyncMethod_CreateRoom<WithAsyncMethod_JoinRoom<WithAsyncMethod_LeaveRoom<WithAsyncMethod_StartMessageStream<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Login() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::rmsg::LoginReq, ::rmsg::LoginRes>(
          [this](::grpc::ServerContext* context,
                 const ::rmsg::LoginReq* request,
                 ::rmsg::LoginRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Login(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Login(
        ::grpc::experimental::MessageAllocator< ::rmsg::LoginReq, ::rmsg::LoginRes>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rmsg::LoginReq, ::rmsg::LoginRes>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::rmsg::LoginReq* request, ::rmsg::LoginRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Login(::grpc::ServerContext* context, const ::rmsg::LoginReq* request, ::rmsg::LoginRes* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Logout() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::rmsg::LogoutReq, ::rmsg::LogoutRes>(
          [this](::grpc::ServerContext* context,
                 const ::rmsg::LogoutReq* request,
                 ::rmsg::LogoutRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Logout(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Logout(
        ::grpc::experimental::MessageAllocator< ::rmsg::LogoutReq, ::rmsg::LogoutRes>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rmsg::LogoutReq, ::rmsg::LogoutRes>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* context, const ::rmsg::LogoutReq* request, ::rmsg::LogoutRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Logout(::grpc::ServerContext* context, const ::rmsg::LogoutReq* request, ::rmsg::LogoutRes* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CreateRoom() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::rmsg::CreateRoomReq, ::rmsg::CreateRoomRes>(
          [this](::grpc::ServerContext* context,
                 const ::rmsg::CreateRoomReq* request,
                 ::rmsg::CreateRoomRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateRoom(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CreateRoom(
        ::grpc::experimental::MessageAllocator< ::rmsg::CreateRoomReq, ::rmsg::CreateRoomRes>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rmsg::CreateRoomReq, ::rmsg::CreateRoomRes>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoom(::grpc::ServerContext* context, const ::rmsg::CreateRoomReq* request, ::rmsg::CreateRoomRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateRoom(::grpc::ServerContext* context, const ::rmsg::CreateRoomReq* request, ::rmsg::CreateRoomRes* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_JoinRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_JoinRoom() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::rmsg::JoinRoomReq, ::rmsg::JoinRoomRes>(
          [this](::grpc::ServerContext* context,
                 const ::rmsg::JoinRoomReq* request,
                 ::rmsg::JoinRoomRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->JoinRoom(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_JoinRoom(
        ::grpc::experimental::MessageAllocator< ::rmsg::JoinRoomReq, ::rmsg::JoinRoomRes>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rmsg::JoinRoomReq, ::rmsg::JoinRoomRes>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_JoinRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinRoom(::grpc::ServerContext* context, const ::rmsg::JoinRoomReq* request, ::rmsg::JoinRoomRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void JoinRoom(::grpc::ServerContext* context, const ::rmsg::JoinRoomReq* request, ::rmsg::JoinRoomRes* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LeaveRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_LeaveRoom() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::rmsg::LeaveRoomReq, ::rmsg::LeaveRoomRes>(
          [this](::grpc::ServerContext* context,
                 const ::rmsg::LeaveRoomReq* request,
                 ::rmsg::LeaveRoomRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->LeaveRoom(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_LeaveRoom(
        ::grpc::experimental::MessageAllocator< ::rmsg::LeaveRoomReq, ::rmsg::LeaveRoomRes>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rmsg::LeaveRoomReq, ::rmsg::LeaveRoomRes>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_LeaveRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveRoom(::grpc::ServerContext* context, const ::rmsg::LeaveRoomReq* request, ::rmsg::LeaveRoomRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void LeaveRoom(::grpc::ServerContext* context, const ::rmsg::LeaveRoomReq* request, ::rmsg::LeaveRoomRes* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartMessageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_StartMessageStream() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackBidiHandler< ::rmsg::Message, ::rmsg::Message>(
          [this] { return this->StartMessageStream(); }));
    }
    ~ExperimentalWithCallbackMethod_StartMessageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartMessageStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rmsg::Message, ::rmsg::Message>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::rmsg::Message, ::rmsg::Message>* StartMessageStream() {
      return new ::grpc::internal::UnimplementedBidiReactor<
        ::rmsg::Message, ::rmsg::Message>;}
  };
  typedef ExperimentalWithCallbackMethod_Login<ExperimentalWithCallbackMethod_Logout<ExperimentalWithCallbackMethod_CreateRoom<ExperimentalWithCallbackMethod_JoinRoom<ExperimentalWithCallbackMethod_LeaveRoom<ExperimentalWithCallbackMethod_StartMessageStream<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::rmsg::LoginReq* request, ::rmsg::LoginRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Logout() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* context, const ::rmsg::LogoutReq* request, ::rmsg::LogoutRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateRoom() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoom(::grpc::ServerContext* context, const ::rmsg::CreateRoomReq* request, ::rmsg::CreateRoomRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_JoinRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_JoinRoom() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_JoinRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinRoom(::grpc::ServerContext* context, const ::rmsg::JoinRoomReq* request, ::rmsg::JoinRoomRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LeaveRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_LeaveRoom() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_LeaveRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveRoom(::grpc::ServerContext* context, const ::rmsg::LeaveRoomReq* request, ::rmsg::LeaveRoomRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartMessageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StartMessageStream() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_StartMessageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartMessageStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rmsg::Message, ::rmsg::Message>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::rmsg::LoginReq* request, ::rmsg::LoginRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Logout() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* context, const ::rmsg::LogoutReq* request, ::rmsg::LogoutRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateRoom() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoom(::grpc::ServerContext* context, const ::rmsg::CreateRoomReq* request, ::rmsg::CreateRoomRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRoom(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_JoinRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_JoinRoom() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_JoinRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinRoom(::grpc::ServerContext* context, const ::rmsg::JoinRoomReq* request, ::rmsg::JoinRoomRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoinRoom(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LeaveRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_LeaveRoom() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_LeaveRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveRoom(::grpc::ServerContext* context, const ::rmsg::LeaveRoomReq* request, ::rmsg::LeaveRoomRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeaveRoom(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartMessageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_StartMessageStream() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_StartMessageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartMessageStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rmsg::Message, ::rmsg::Message>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartMessageStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(5, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Login() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Login(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::rmsg::LoginReq* request, ::rmsg::LoginRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Login(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Logout() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Logout(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* context, const ::rmsg::LogoutReq* request, ::rmsg::LogoutRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Logout(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateRoom() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateRoom(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoom(::grpc::ServerContext* context, const ::rmsg::CreateRoomReq* request, ::rmsg::CreateRoomRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateRoom(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_JoinRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_JoinRoom() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->JoinRoom(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_JoinRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinRoom(::grpc::ServerContext* context, const ::rmsg::JoinRoomReq* request, ::rmsg::JoinRoomRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void JoinRoom(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LeaveRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_LeaveRoom() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->LeaveRoom(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_LeaveRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveRoom(::grpc::ServerContext* context, const ::rmsg::LeaveRoomReq* request, ::rmsg::LeaveRoomRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void LeaveRoom(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartMessageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_StartMessageStream() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->StartMessageStream(); }));
    }
    ~ExperimentalWithRawCallbackMethod_StartMessageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartMessageStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rmsg::Message, ::rmsg::Message>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* StartMessageStream() {
      return new ::grpc::internal::UnimplementedBidiReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::rmsg::LoginReq, ::rmsg::LoginRes>(std::bind(&WithStreamedUnaryMethod_Login<BaseClass>::StreamedLogin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::rmsg::LoginReq* request, ::rmsg::LoginRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rmsg::LoginReq,::rmsg::LoginRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Logout() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::rmsg::LogoutReq, ::rmsg::LogoutRes>(std::bind(&WithStreamedUnaryMethod_Logout<BaseClass>::StreamedLogout, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Logout(::grpc::ServerContext* context, const ::rmsg::LogoutReq* request, ::rmsg::LogoutRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rmsg::LogoutReq,::rmsg::LogoutRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateRoom() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::rmsg::CreateRoomReq, ::rmsg::CreateRoomRes>(std::bind(&WithStreamedUnaryMethod_CreateRoom<BaseClass>::StreamedCreateRoom, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateRoom(::grpc::ServerContext* context, const ::rmsg::CreateRoomReq* request, ::rmsg::CreateRoomRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateRoom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rmsg::CreateRoomReq,::rmsg::CreateRoomRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_JoinRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_JoinRoom() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::rmsg::JoinRoomReq, ::rmsg::JoinRoomRes>(std::bind(&WithStreamedUnaryMethod_JoinRoom<BaseClass>::StreamedJoinRoom, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_JoinRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status JoinRoom(::grpc::ServerContext* context, const ::rmsg::JoinRoomReq* request, ::rmsg::JoinRoomRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedJoinRoom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rmsg::JoinRoomReq,::rmsg::JoinRoomRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LeaveRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_LeaveRoom() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::rmsg::LeaveRoomReq, ::rmsg::LeaveRoomRes>(std::bind(&WithStreamedUnaryMethod_LeaveRoom<BaseClass>::StreamedLeaveRoom, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_LeaveRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LeaveRoom(::grpc::ServerContext* context, const ::rmsg::LeaveRoomReq* request, ::rmsg::LeaveRoomRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLeaveRoom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rmsg::LeaveRoomReq,::rmsg::LeaveRoomRes>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Logout<WithStreamedUnaryMethod_CreateRoom<WithStreamedUnaryMethod_JoinRoom<WithStreamedUnaryMethod_LeaveRoom<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Logout<WithStreamedUnaryMethod_CreateRoom<WithStreamedUnaryMethod_JoinRoom<WithStreamedUnaryMethod_LeaveRoom<Service > > > > > StreamedService;
};

}  // namespace rmsg


#endif  // GRPC_realtime_5fmessenger_2eproto__INCLUDED
